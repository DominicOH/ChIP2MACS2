#!/bin/bash
set -e 

START=$(date +%s)

##### Function definition #####
usage() {
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo " -t, --treatment       [REQUIRED] ChIP-seq treatment file(s). Must be surrounded by quotations if using wildcards"
    echo " -c, --control         ChIP-seq control file(s). Can be previously aligned .bam file with duplicates marked. Must be surrounded by quotations if using wildcards"
    echo " -x, --index           [REQUIRED] Bowtie2 index path (without tailing .bt.x)"
    echo " -p, --paired          Run in paired-end mode [default: false]"
    echo " -n, --name            A prefix for output files. By default this is the basename of the first treatment file"
    echo " --gsize               Effective genome size for MACS2. Can be a string shortcut (e.g. 'hs', 'mm') or numeric [1.0e+9 | 1000000000] [default: hs]"
    echo " --blacklist           Blacklist regions [.bed file]. Removed from .bam outputs and ignored in peak calling. Chromosome names must match those in INDEX [default: None]"
    echo " --genome              Required if using --blacklist. TSV format file of chromosome names and sizes. Chromosome names must match those in INDEX. Produced using "
    echo " --keep-intermediates  Whether to retain intermediate alignment files [default: false]"
    echo " --no-control          Pass to run MACS2 without a control/background dataset"
    echo " --cores [INT]         Total number of cores to use across commands"
    echo " -h, --help            Display this help message"
}

startup_check() {
    if ! command -v $1 ; then 
        echo "$1 not found. Check environment."
        exit 1
    fi
}

exists() { 
    if ! [[ -e $1 ]]; then 
        echo "File(s) $1 not found. Exiting."
        usage
        exit 1
    else 
        echo "Found file $1"
    fi
}

sort_and_index() {
    OUT=$(dirname "$1")/$BNAME.sorted
    samtools sort -@ $"$CORES" -O BAM -o "$OUT.bam" "$1" &&
    samtools index -@ $"$CORES" -bo "$OUT.bai" "$OUT.bam" 
}

remove_blacklist() { 
    OUT=$(dirname "$1")/$BNAME.filtered.bam
    bedtools intersect -a $1 -b $BLACKLIST -v > $OUT
}

##### Variable definition #####
TREATMENT=()
CONTROL=()
PAIRED=false
INDEX=""
BNAME=""
KEEP=false
GSIZE="hs"
BLACKLIST=""
GENOME=""
NOCONTROL=false
CORES=4
TRIM_CORES=4

if [[ $# -eq 0 ]]; then 
    usage ;
    exit 0
fi

for tool in trim_galore bowtie2 samtools picard macs2 bedtools ; do
    startup_check $tool ;
done

##### Arg parsing #####
while [[ $# -gt 0 ]]; do
    case "$1" in
        -t | --treatment)
            shift
            for file in $1; do
                exists "$file"
                TREATMENT+=("$file")
            done
            ;;  
        --no-control)
            NOCONTROL=true
            ;;   
        -c | --control)
            shift
            if [[ $NOCONTROL == false ]]; then 
                for file in $1; do
                    exists "$file"
                    CONTROL+=("$file")
                done
            fi
            ;;
        -x | --index)
            shift
            INDEX="$1"
            ;;
        -p | --paired)
            PAIRED=true
            ;;
        -n | --name)
            shift
            BNAME="$1"
            ;;
        --blacklist)
            shift
            exists "$1"
            BLACKLIST="$1"
            ;;
        --genome)
            shift
            exists "$1"
            GENOME="$1"
            ;;
        --gsize)
            shift
            GSIZE="$1"
            ;;
        --keep-intermediates)
            KEEP=true
            ;;
        --cores)
            shift
            CORES="$1"
            ;;
        -h | --help)
            usage
            exit 0
            ;;
        *)
            echo "Invalid option: $1"
            usage
            exit 1
            ;;
    esac
    shift
done

if [[ -z "$INDEX" ]]; then 
    echo "Missing index for alignment." ; 
    exit 1
fi 

if [[ -z "$BNAME" ]]; then BNAME="$(basename "${TREATMENT[0]}" .fastq.gz )" ; fi 

# Check if control file is already aligned
if [[ $NOCONTROL == false && "${CONTROL[0]}" == *.bam ]]; then echo "Control file: $file is already aligned." ; fi 

echo "Paired-end mode: $PAIRED"

##### TrimGalore! adapter trimming and QC #####
if [[ "${CONTROL[0]}" != *.bam || $NOCONTROL == false ]]; then
    mkdir ChIP2MACS2/"$BNAME"/trimGalore/controls -p
fi
mkdir ChIP2MACS2/"$BNAME"/trimGalore/treatment -p
mkdir ChIP2MACS2/"$BNAME"/logs -p 

# Actual core usage of trim_galore is ~4x greater than input, so core usage is reduced here
# See TrimGalore! "Actual core usage" in trim_galore documentation for more
if [[ $CORES -gt 4 ]]; 
    then TRIM_CORES=$(( CORES / 4 ))  
fi

echo "Running trim_galore with $TRIM_CORES cores" 
echo "Trimming treatment files. Saving to ChIP2MACS2/$BNAME/trimGalore/treatment "

if [[ $PAIRED == true ]]; then 
    (trim_galore "${TREATMENT[@]}" --paired \
    -o ChIP2MACS2/"$BNAME"/trimGalore/treatment \
    --fastqc -j "$TRIM_CORES" --gzip) 2>> ChIP2MACS2/"$BNAME"/logs/"$BNAME"_treatment.trimGalore.log ;
else 
    (trim_galore "${TREATMENT[@]}" -o ChIP2MACS2/"$BNAME"/trimGalore/treatment \
    --fastqc -j "$TRIM_CORES" --gzip) 2>> ChIP2MACS2/"$BNAME"/logs/"$BNAME"_treatment.trimGalore.log ;
fi

if [[ $NOCONTROL == false && "${CONTROL[0]}" != *.bam ]]; then echo "Trimming control files. Saving to ChIP2MACS2/$BNAME/trimGalore/controls " ; fi

if [[ $NOCONTROL == false && $PAIRED == true && "${CONTROL[0]}" != *.bam ]]; then 
    (trim_galore "${CONTROL[@]}" --paired \
    -o ChIP2MACS2/"$BNAME"/trimGalore/controls \
    --fastqc -j "$TRIM_CORES" --gzip) 2>> ChIP2MACS2/"$BNAME"/logs/"$BNAME"_control.trimGalore.log ;
elif [[ $NOCONTROL == false && "${CONTROL[0]}" != *.bam ]]; then 
    (trim_galore "${CONTROL[@]}" -o ChIP2MACS2/"$BNAME"/trimGalore/controls  \
    -fastqc -j "$TRIM_CORES" --gzip) 2>> ChIP2MACS2/"$BNAME"/logs/"$BNAME"_control.trimGalore.log ;
fi 

echo "Aligning trimmed files to $(basename "$INDEX") " ;

##### Bowtie2 alignment to a reference genome #####
if [[ "${CONTROL[0]}" != *.bam || $NOCONTROL == false ]]; then mkdir ChIP2MACS2/"$BNAME"/bowtie2/controls -p ; fi
mkdir ChIP2MACS2/"$BNAME"/bowtie2/treatment -p ; 

if [[ $PAIRED == true ]]; then
    (bowtie2 -x "$INDEX" -1 ChIP2MACS2/"$BNAME"/trimGalore/treatment/*1.fq.gz \
    -2 ChIP2MACS2/"$BNAME"/trimGalore/treatment/*2.fq.gz -p "$CORES" \
    -S ChIP2MACS2/"$BNAME"/bowtie2/treatment/"$BNAME".sam) 2> ChIP2MACS2/"$BNAME"/logs/"$BNAME"_treatment_bowtie2.log
else
    (bowtie2 -x "$INDEX" -U ChIP2MACS2/"$BNAME"/trimGalore/treatment/*.fq.gz -p "$CORES" \
    -S ChIP2MACS2/"$BNAME"/bowtie2/treatment/"$BNAME".sam) 2> ChIP2MACS2/"$BNAME"/logs/"$BNAME"_treatment_bowtie2.log
fi
echo "Aligned treatment files saved as ChIP2MACS2/$BNAME/bowtie2/treatment/$BNAME.sam " ;

if [[ $PAIRED == true && "${CONTROL[0]}" != *.bam && $NOCONTROL == false ]]; then 
    (bowtie2 -x "$INDEX" -1 ChIP2MACS2/"$BNAME"/trimGalore/controls/*1.fq.gz \
    -2 ChIP2MACS2/"$BNAME"/trimGalore/controls/*2.fq.gz -p "$CORES" \
    -S ChIP2MACS2/"$BNAME"/bowtie2/controls/"$BNAME".sam) 2> ChIP2MACS2/"$BNAME"/logs/"$BNAME"_control_bowtie2.log
elif [[ "${CONTROL[0]}" != *.bam && $PAIRED == false && $NOCONTROL == false ]]; then 
    (bowtie2 -x "$INDEX" -U ChIP2MACS2/"$BNAME"/trimGalore/controls/*.fq.gz -p "$CORES" \
    -S ChIP2MACS2/"$BNAME"/bowtie2/controls/"$BNAME".sam) 2> ChIP2MACS2/"$BNAME"/logs/"$BNAME"_control_bowtie2.log
fi

if [[ $NOCONTROL == false && "${CONTROL[0]}" != *.bam ]]; then echo "Aligned control files saved as ChIP2MACS2/$BNAME/bowtie2/controls/$BNAME.sam " ; fi

sort_and_index ChIP2MACS2/"$BNAME"/bowtie2/treatment/"$BNAME".sam
if [[ $NOCONTROL == false ]]; then sort_and_index ChIP2MACS2/"$BNAME"/bowtie2/controls/"$BNAME".sam ; fi

##### Blacklisted sites are removed #####
PICARD_IN_T=ChIP2MACS2/"$BNAME"/bowtie2/treatment/"$BNAME".sorted.bam ; 
if [[ "${CONTROL[0]}" != *.bam && $NOCONTROL == false ]]; then PICARD_IN_C=ChIP2MACS2/"$BNAME"/bowtie2/controls/"$BNAME".sorted.bam ; fi

if [[ -n $BLACKLIST && -n $GENOME ]]; then
    echo "Filtering out blacklisted regions in $BLACKLIST" ; 

    remove_blacklist ChIP2MACS2/"$BNAME"/bowtie2/treatment/"$BNAME".sorted.bam
    PICARD_IN_T=ChIP2MACS2/"$BNAME"/bowtie2/treatment/$BNAME.filtered.bam

    if [[ "${CONTROL[0]}" != *.bam && $NOCONTROL == false ]]; then 
        remove_blacklist ChIP2MACS2/"$BNAME"/bowtie2/controls/"$BNAME".sorted.bam 
        PICARD_IN_C=ChIP2MACS2/"$BNAME"/bowtie2/controls/$BNAME.filtered.bam ;
    fi
fi 

##### Picard MarkDuplicates to tag duplicate reads in files #####
if [[ "${CONTROL[0]}" != *.bam && $NOCONTROL == false ]]; then mkdir ChIP2MACS2/"$BNAME"/picard/controls -p ; fi
mkdir ChIP2MACS2/"$BNAME"/picard/treatment -p ;  

echo "Alignment complete. Marking duplicate reads"

picard MarkDuplicates -I "$PICARD_IN_T" --QUIET true \
    -M ChIP2MACS2/"$BNAME"/picard/treatment/"$BNAME".duplicationMetrics \
    -O ChIP2MACS2/"$BNAME"/picard/treatment/"$BNAME".marked_duplicates.bam &&
samtools index -@ $CORES -bo ChIP2MACS2/"$BNAME"/picard/treatment/"$BNAME".marked_duplicates.bai ChIP2MACS2/"$BNAME"/picard/treatment/"$BNAME".marked_duplicates.bam &

if [[ "${CONTROL[0]}" != *.bam && $NOCONTROL == false ]]; then 
    picard MarkDuplicates -I "$PICARD_IN_C" --QUIET true \
        -M ChIP2MACS2/"$BNAME"/picard/controls/"$BNAME".duplicationMetrics \
        -O ChIP2MACS2/"$BNAME"/picard/controls/"$BNAME".marked_duplicates.bam &&
    samtools index -@ $CORES -bo ChIP2MACS2/"$BNAME"/picard/controls/"$BNAME".marked_duplicates.bai ChIP2MACS2/"$BNAME"/picard/controls/"$BNAME".marked_duplicates.bam ; 
fi & 
wait 

##### [OPTIONAL] Removal of intermediate files #####
if [[ $KEEP == false ]]; then 
    echo "Removing intermediate files:" ;
    for file in ChIP2MACS2/"$BNAME"/bowtie2/*/* ; do
        echo "$file" ;
    done
    rm -r ChIP2MACS2/"$BNAME"/bowtie2/ ;
fi 

##### MACS2 to call ChIP-seq peaks #####
mkdir ChIP2MACS2/"$BNAME"/MACS2 -p ;

if [[ "${CONTROL[0]}" != *.bam && $NOCONTROL == false ]]; then 
    MACS2_INPUT="ChIP2MACS2/$BNAME/picard/controls/$BNAME.marked_duplicates.bam" ; 
elif [[ "${CONTROL[0]}" == *.bam ]]; then MACS2_INPUT="${CONTROL[0]}" 
fi

if [[ $NOCONTROL == true ]]; then 
    macs2 callpeak -t ChIP2MACS2/"$BNAME"/picard/treatment/"$BNAME".marked_duplicates.bam \
        -g "$GSIZE" --outdir ChIP2MACS2/"$BNAME"/MACS2/ -n "$BNAME" --call-summits ;
else
    macs2 callpeak -t ChIP2MACS2/"$BNAME"/picard/treatment/"$BNAME".marked_duplicates.bam -c "$MACS2_INPUT" \
        -g "$GSIZE" --outdir ChIP2MACS2/"$BNAME"/MACS2/ -n "$BNAME" --call-summits ;
fi

##### End of script #####
END=$(date +%s)

echo "Done. Time elapsed: $(( END-START )) seconds" ; 
exit 0 ;